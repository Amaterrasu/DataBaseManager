// Работа с командной строкой
#Использовать cmdline
#Использовать logos

Перем Лог Экспорт;
Перем Протокол Экспорт;
Перем ПараметрыОбщие Экспорт;
Перем ПараметрыСоединений Экспорт;
Перем ПараметрыКоманд Экспорт;

Процедура Инициализация(Знач ТекущиеАргуметы, Знач ТекущийЛог) Экспорт

	// Инициализация лога и протокола
	Протокол = Новый Протокол();
	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Лог.УстановитьРаскладку(Протокол);
	
	// Инициализация замеров
	Протокол.НачатьЗамер(Лог);
	Протокол.НачатьЗамер(Лог, "Инициализация");

	// Инициализация параметров
	ПараметрыОбщие = Новый Структура;
	ПараметрыОбщие.Вставить("РежимОтладки", Ложь);
	ПараметрыОбщие.Вставить("РежимТестирования", Ложь);
	ПараметрыОбщие.Вставить("ПутьФайлаПараметровСоединения", "");
	ПараметрыОбщие.Вставить("ПарольФайлаПараметровСоединения", "");
	ПараметрыОбщие.Вставить("ПутьФайлаПараметровКоманд", "");
	ПараметрыОбщие.Вставить("ПарольФайлаПараметровКоманд", "");
	ПараметрыСоединения = Неопределено;
	ПараметрыКоманд = Неопределено;

	// Получение параметров
	ПолучитьПараметры(ТекущиеАргуметы);

КонецПроцедуры	

// === СЛУЖЕБНЫЕ === //

Процедура ПолучитьПараметры(Знач ТекущиеАргуметы)
	
	ПарсерАргументов = Новый ПарсерАргументовКоманднойСтроки();
	
	// Служебные параметры (необязательные)
	ПарсерАргументов.ДобавитьПараметрФлаг("-debug", "Признак отладки (влияет на уровень логов)");
	ПарсерАргументов.ДобавитьПараметрФлаг("-testparam", "Тестирование параметров (не выполняет действия с СУБД)");

	// Рабочие параметры (пароли имеют смысл только для запароленных архивов) 
	ПарсерАргументов.ДобавитьИменованныйПараметр("-connection", "Путь архива параметров соединения");
	ПарсерАргументов.ДобавитьИменованныйПараметр("-connection_pas", "Пароль архива параметров соединения");
	ПарсерАргументов.ДобавитьИменованныйПараметр("-command", "Путь файла/папки/архива с параметрами/файлами параметров команд");
	ПарсерАргументов.ДобавитьИменованныйПараметр("-command_pas", "Пароль архива параметров команд");
	
	// Локальная переменная параметров
	ПараметрыКоманднойСтроки = ПарсерАргументов.Разобрать(ТекущиеАргуметы); 
	
	// При отладке начинаем выводить все сообщения
	Если ПараметрыКоманднойСтроки.Получить("-debug") = Истина Тогда
		ПараметрыОбщие.РежимОтладки = Истина;
		Лог.УстановитьУровень(УровниЛога.Отладка);
		Лог.Отладка("Установлен режим отладки");
	КонецЕсли;

	// Тестирование параметров подобно отладке, только после получения всех параметров скрипт завершает работу.
	Если ПараметрыКоманднойСтроки.Получить("-testparam") = Истина Тогда
		ПараметрыОбщие.РежимТестирования = Истина;
		Лог.УстановитьУровень(УровниЛога.Отладка);
		Лог.Информация("Установлен режим тестирования параметров");
	КонецЕсли;
	
	// Параметры подключения
	ПутьФайлаПараметровСоединения = ПараметрыКоманднойСтроки.Получить("-connection");
	ПарольФайлаПараметровСоединения = ПараметрыКоманднойСтроки.Получить("-connection_pas");

	Если ПутьФайлаПараметровСоединения <> Неопределено Тогда
		ПараметрыОбщие.ПутьФайлаПараметровСоединения = ПутьФайлаПараметровСоединения;
		ПараметрыОбщие.ПарольФайлаПараметровСоединения = ПарольФайлаПараметровСоединения;
		Лог.Отладка("-connection: " + Строка(ПутьФайлаПараметровСоединения));
		Лог.Отладка("-connection_pas: " + Строка(ПарольФайлаПараметровСоединения));
	Иначе
		Лог.КритическаяОшибка("Не указан путь файла параметров соединения.");
		Возврат;	
	КонецЕсли;	

	// Параметры команд
	ПутьФайлаПараметровКоманд = ПараметрыКоманднойСтроки.Получить("-command");
	ПарольФайлаПараметровКоманд = ПараметрыКоманднойСтроки.Получить("-command_pas");

	Если ПутьФайлаПараметровКоманд <> Неопределено Тогда
		ПараметрыОбщие.ПутьФайлаПараметровКоманд = ПутьФайлаПараметровКоманд;
		ПараметрыОбщие.ПарольФайлаПараметровКоманд = ПарольФайлаПараметровКоманд;
		Лог.Отладка("-command: " + Строка(ПутьФайлаПараметровКоманд));
		Лог.Отладка("-command_pas: " + Строка(ПарольФайлаПараметровКоманд));
	Иначе
		Лог.КритическаяОшибка("Не указан путь файла параметров команд.");
		Возврат;	
	КонецЕсли;

	// Чтение параметров соединения
	ПараметрыСоединений = ФайловыйИнтерфейс.ПолучитьТаблицуПараметров(ПутьФайлаПараметровСоединения, ПарольФайлаПараметровСоединения, "ПараметрыСоединений");
	ПараметрыКоманд = ФайловыйИнтерфейс.ПолучитьТаблицуПараметров(ПутьФайлаПараметровКоманд, ПарольФайлаПараметровКоманд, "ПараметрыКоманд");

	// Проверка параметров соединений
	Лог.Отладка("Параметры соединений: " + Строка(ПараметрыСоединений));
	Лог.Отладка("Тип: " + Строка(ТипЗнч(ПараметрыСоединений)));

	// Проверка параметров команд
	Лог.Отладка("Параметры команд: " + Строка(ПараметрыКоманд));
	Лог.Отладка("Тип: " + Строка(ТипЗнч(ПараметрыКоманд)));

	// Вывод параметров рекурсионный и может долго выполняться, 
	// поэтому выполняется только в режиме тестирования параметров.
	Если ПараметрыОбщие.РежимТестирования Тогда
		Лог.Отладка("//===ПАРАМЕТРЫ СОЕДИНЕНИЙ===//");
		Для Каждого ПараметрСоединения Из ПараметрыСоединений Цикл
			РекурсионныйВыводЛога(ПараметрСоединения, ПараметрыСоединений.Колонки, "");
		КонецЦикла;	

		Лог.Отладка("//===ПАРАМЕТРЫ КОМАНД===//");
		Для Каждого ПараметрКоманды Из ПараметрыКоманд Цикл
			РекурсионныйВыводЛога(ПараметрКоманды, ПараметрыКоманд.Колонки, "");
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

Процедура РекурсионныйВыводЛога (ОбъектЛогирования, Колонки, Табуляция)

	Если ТипЗнч(ОбъектЛогирования) = Тип("Соответствие") Тогда
		Для Каждого КлючИЗначение Из ОбъектЛогирования Цикл
			Ключ = КлючИЗначение.Ключ;
			Значение = КлючИЗначение.Значение;
			Лог.Отладка(Строка(Табуляция) + Строка(Ключ) + ": " + Строка(Значение));
			РекурсионныйВыводЛога(Значение, Колонки, Табуляция + " ");
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектЛогирования) = Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого Колонка Из Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ЗначениеКолонки = ОбъектЛогирования[ИмяКолонки];
			Лог.Отладка(Строка(Табуляция) + Строка(ИмяКолонки) + ": " + Строка(ЗначениеКолонки));
			РекурсионныйВыводЛога(ЗначениеКолонки, Колонки, Табуляция + " ");
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектЛогирования) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ОбъектЛогирования Цикл
			Лог.Отладка(Строка(ЭлементМассива));
			РекурсионныйВыводЛога(ЭлементМассива, Колонки, Табуляция + " ");
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры