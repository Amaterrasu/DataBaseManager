
#Использовать logos

// Ищет команды по идентификатору владельца, таки образом можно настраивать последовательность выполнения команд
// Если ИдентификтаорДочернихПараметровКоманд = Неопределено, то будут найдены "Первоочередные" команды, то есть
// команды, с которых начинается исполнение скрипта.  
Функция ЕстьДочерниеПараметрыКоманд(ПараметрыКоманд, ДочерниеПараметрыКоманд, ИдентификаторПредшественика) Экспорт

	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога()); 
	ДочерниеПараметрыКоманд = ПолучитьДочерниеПараметрыКоманд(ПараметрыКоманд, ИдентификаторПредшественика);
	КоличествоДочернихПараметровКоманд = ДочерниеПараметрыКоманд.Количество();

	Если КоличествоДочернихПараметровКоманд > 0 Тогда
		Лог.Отладка("Найдено дочерних команд: " + Строка(КоличествоДочернихПараметровКоманд));
		Возврат Истина;
	Иначе
		Лог.Отладка("Дочерних команд не найдено.");
		Возврат Ложь;
	КонецЕсли;		
	
КонецФункции 

Функция ПолучитьДочерниеПараметрыКоманд(ПараметрыКоманд, ИдентификаторПредшественика)

	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Лог.Отладка("Начата проверка на наличие дочерних команд.");
	СтруктураОтбора = Новый Структура("ИдентификаторПредшественика", ИдентификаторПредшественика);
	ДочерниеПараметрыКоманд = ПараметрыКоманд.НайтиСтроки(СтруктураОтбора);
	Возврат ДочерниеПараметрыКоманд;

КонецФункции	

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура РекурсивнаяОбработкаКоманд(ТекущиеПараметрыКоманд, ПараметрыКоманд, ПараметрыСоединений, ТаблицаКэшаВыполненияКоманд) Экспорт
	
	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Для Каждого ТекущиеПараметрыКоманды Из ТекущиеПараметрыКоманд Цикл
		
		// Для удобства
		ИдентификаторКоманды = ТекущиеПараметрыКоманды.Идентификатор;
		ИдентификаторСоединения = ТекущиеПараметрыКоманды.ИдентификаторСоединения;
		ИгнорироватьОшибкиПредшественика = ТекущиеПараметрыКоманды.ИгнорироватьОшибкиПредшественика;
		
		Если ТекущиеПараметрыКоманды.Активность Тогда
			
			// Получение параметров соединений
			ТекущиеПараметрыСоединений = ПолучитьПараметрыСоединенияДляКоманды(ПараметрыСоединений, ИдентификаторСоединения);		
			ДочерниеПараметрыКоманд = ПолучитьДочерниеПараметрыКоманд(ПараметрыКоманд, ИдентификаторКоманды);

			Если ТекущиеПараметрыСоединений = Неопределено Тогда
				Лог.Ошибка("По иеднтификатору не найдено параметров соединений. 
					|Идентификатор команды: " + Строка(ИдентификаторКоманды) + "; 
					|Идентификатор соединения: " + Строка(ИдентификаторСоединения));
				Продолжить;
			КонецЕсли;	

			// Выполнение команды
			Для Каждого ТекущиеПараметрыСоединения Из ТекущиеПараметрыСоединений Цикл
				Если КомандаУжеВыполнялась(ТаблицаКэшаВыполненияКоманд, ИдентификаторКоманды, ИдентификаторСоединения) Тогда
					Лог.Ошибка("Команда """ + Строка(ИдентификаторКоманды) + """ уже выпонялась для соединения """ + Строка(ИдентификаторСоединения) + """.");
					Продолжить; // Ликвидация зацикливания и перекрестных ссылок
				КонецЕсли;	
				
				КэшТекущегоВыполненияКоманды = ТаблицаКэшаВыполненияКоманд.Добавить();
				КэшТекущегоВыполненияКоманды.ИдентификаторКоманды = ИдентификаторКоманды;
				КэшТекущегоВыполненияКоманды.ИдентификаторСоединения = ИдентификаторСоединения;
				
				КомандаВыполнена = ВыполнитьМетодПоТипуКоманды(ТекущиеПараметрыКоманды, ТекущиеПараметрыСоединения, КэшТекущегоВыполненияКоманды.ОписаниеОшибок);
				КэшТекущегоВыполненияКоманды.Выполнена = КомандаВыполнена;

				Если КомандаВыполнена 
					ИЛИ ИгнорироватьОшибкиПредшественика Тогда
					
					Для Каждого ДочерниеПараметрыКоманды Из ДочерниеПараметрыКоманд Цикл
						РекурсивнаяОбработкаКоманд(ДочерниеПараметрыКоманды, ПараметрыКоманд, ПараметрыСоединений, ТаблицаКэшаВыполненияКоманд);
					КонецЦикла;	
				КонецЕсли;	

			КонецЦикла;	
		Иначе
			Лог.Отладка("Команда " + Строка(ИдентификаторКоманды) + " не активна.");
			Продолжить;	
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры // РекурсивнаяОбработкаКоманд(ТекущиеКоманды, ПараметрыКоманд, ПараметрыСоединений)

Функция ПолучитьПараметрыСоединенияДляКоманды(ПараметрыСоединений, ИдентификаторПараметровСоединения)

	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());

	// Явный поиск
	Если ЗначениеЗаполнено(ИдентификаторПараметровСоединения) Тогда
		
		Лог.Отладка("Начат явный поиск параметров соединения по идентификатору: " + Строка(ИдентификаторПараметровСоединения));
		СтруктураОтбора = Новый Структура("Идентификатор", ИдентификаторПараметровСоединения);
		ПараметрыСоединенийПоИдентификатору = ПараметрыСоединений.НайтиСтроки(СтруктураОтбора);
		КоличествоПараметровСоединений = ПараметрыСоединенийПоИдентификатору.Количество();

		Если КоличествоПараметровСоединений > 0 Тогда
			Лог.Отладка("Найдено параметров соединений по идентификатору: " + Строка(КоличествоПараметровСоединений));
			Возврат ПараметрыСоединенийПоИдентификатору;
		Иначе
			Лог.Отладка("Параметров соединений по идентификатору не найдено");	
		КонецЕсли;
	КонецЕсли;			

	// Если выше не произошло выхода из функции значит либо не задан идентификатор либо не найдено ни одного параметра
	// Поэтому возвращается значение по умолчанию.
	Лог.Отладка("Начат поиск параметров соединения по умолчанию");
	СтруктураОтбора = Новый Структура("Идентификатор", "ПоУмолчанию");
	ПараметрыСоединенийПоУмолчанию = ПараметрыСоединений.НайтиСтроки(СтруктураОтбора);	
	КоличествоПараметровСоединений = ПараметрыСоединенийПоУмолчанию.Количество();

	Если КоличествоПараметровСоединений > 0 Тогда
		Лог.Отладка("Найдено параметров соединений по умолчанию: " + Строка(КоличествоПараметровСоединений));
		Возврат ПараметрыСоединенийПоУмолчанию;
	Иначе
		Лог.Отладка("Параметров соединений по умолчанию не найдено");
		Возврат Неопределено;	
	КонецЕсли;

КонецФункции	

Функция ВыполнитьМетодПоТипуКоманды(ПараметрыКоманды, ПараметрыСоединения, ОписаниеОшибок)

	// Надо бы закэшировать ИдентификаторыМетодов, но пока пусть так
	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	ИдентификаторыМетодов = Инициализация.ПолучитьСвязиИдентификаторовМетодовОбработкиКоманд();
	ТипКоманды = ПараметрыКоманды.ТипКоманды;

	Если ИдентификаторыМетодов.Получить("РезервноеКопирование") = ТипКоманды Тогда
		Возврат ВыполнитьРезервноеКопированиеБазыДанных(ПараметрыКоманды, ПараметрыСоединения, ОписаниеОшибок);
	ИначеЕсли ИдентификаторыМетодов.Получить("ВосстановлениеБазы") = ТипКоманды Тогда
		Возврат ВыполнитьВосстановлениеБазыДанных(ПараметрыКоманды, ПараметрыСоединения, ОписаниеОшибок);
	Иначе // Можно добавлять свою обработку команд, сколько угодно, надо определить ей метод и добавить идентификатор
		Лог.Ошибка("Не определен метод для типа команды """ + Строка(ТипКоманды) + """.");	
	КонецЕсли;	

КонецФункции	

Функция ВыполнитьРезервноеКопированиеБазыДанных(ПараметрыКоманды, ПараметрыСоединения, ОписаниеОшибок)
	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Лог.Отладка("Выполняется резервное копирование базы данных");
КонецФункции

Функция ВыполнитьВосстановлениеБазыДанных(ПараметрыКоманды, ПараметрыСоединения, ОписаниеОшибок)
	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Лог.Отладка("Выполняется восстановление базы данных");
КонецФункции	

Функция КомандаУжеВыполнялась(ТаблицаКэшаВыполненияКоманд, ИдентификаторКоманды, ИдентификаторСоединения)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
	СтруктураОтбора.Вставить("ИдентификаторСоединения", ИдентификаторСоединения);
	
	НайтденныеЗаписиКэша = ТаблицаКэшаВыполненияКоманд.НайтиСтроки(СтруктураОтбора);

	Если НайтденныеЗаписиКэша.Количество() = 0 Тогда
		Возврат Ложь; // Команда еще не выполнялась
	Иначе	
		Возврат Истина; // Команда уже выполнялась
	КонецЕсли;

КонецФункции	

Функция ПолучитьТаблицуКэшаВыполненияКоманд()

	// Таблица в которую попадают комбинации Команда/Соединение хоть раз переданные на выполнение.
	// Если пара уже есть в этой таблице, повторное выполнение команды не производится
	ТаблицаКэшаВыполненияКоманд = Новый ТаблицаЗначений();
	ТаблицаКэшаВыполненияКоманд.Колонки.Добвить("ИдентификаторКоманды");
	ТаблицаКэшаВыполненияКоманд.Колонки.Добвить("ИдентификаторСоединения");
	ТаблицаКэшаВыполненияКоманд.Колонки.Добвить("Выполнена"); // Истина - выполнена успешно, Ложь - выполнена с ошибкой
	ТаблицаКэшаВыполненияКоманд.Колонки.Добвить("ОписаниеОшибок");

	Возврат ТаблицаКэшаВыполненияКоманд;

КонецФункции

