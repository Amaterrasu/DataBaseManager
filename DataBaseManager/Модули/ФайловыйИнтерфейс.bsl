// Логирование
#Использовать logos

Перем Лог;

// Выполняет чтение файла. Если это запароленный архив, то необходимо указать пароль
// Параметры
//	ПутиФайлов - Строка, путь к файлу/папке/архиву, которые необходимо прочитать, может содержать несколько путей разделенных ";"
//	Пароль - Строка, пароль от архива
//	ВидПараметров - Строка, принимает значения "Соединение" или "Выполнение".
//					Влияет на поиск файлов и структуру параметров в файлах.
//	
Функция ПолучитьТаблицуПараметров(ПутиФайлов, Пароль, ИдентификаторПараметров) Экспорт

	Лог = Логирование.ПолучитьЛог(Инициализация.ИмяЛога());
	Лог.Отладка("// Запущено чтение файла параметров");
	Лог.Отладка("ПутиФайлов: " + Строка(ПутиФайлов));
	Лог.Отладка("ИдентификаторПараметров: " + Строка(ИдентификаторПараметров));

	// Инициализация переменных
	ТаблицаПараметров = Неопределено; // Итоговая таблица параметров
	МассивПутейФайлов = СтрРазделить(ПутиФайлов, ";", Ложь);

	Для Каждого ПутьФайла Из МассивПутейФайлов Цикл

		Файл = Новый Файл(ПутьФайла);
		
		Если Файл.Существует() Тогда

			Лог.Отладка("Файл существует");
			МассивФайловПараметров = Новый Массив();
			
			// Маска поиска файлов		
			МаскаПоиска = Инициализация.ПолучитьМаскуПоискаФайлов(ИдентификаторПараметров);
			
			Если МаскаПоиска = Неопределено Тогда
				Лог.КритическаяОшибка("Не найдена маска поиска файлов для параметров: """ + Строка(ИдентификаторПараметров) + """");
			Иначе
				Лог.Отладка("Маска поиска: " + Строка(МаскаПоиска));
			КонецЕсли;	

			// Получение файлов 
			ПутьВременногоКаталога = "";

			Если Файл.ЭтоФайл() Тогда
				
				Лог.Отладка("Это файл");
				РасширениеФайла = Файл.Расширение;
				Лог.Отладка("Расширение файла: " + Строка(РасширениеФайла));
				
				Если РасширениеФайла = ".zip" Тогда
					ПолучитьФайлыАрхива(Файл, Пароль, МаскаПоиска, МассивФайловПараметров, ПутьВременногоКаталога);
				ИначеЕсли РасширениеФайла = ".json" Тогда
					МассивФайловПараметров.Добавить(Файл);
				Иначе		
					Лог.Ошибка("Формат """ + Строка(РасширениеФайла) + """ файла """ + Строка(Файл.ПолноеИмя) + """ не поддерживается.");
					Возврат Неопределено;
				КонецЕсли;	
			Иначе
				Лог.Отладка("Это каталог");
				ПолучитьФайлыКаталога(Файл, Пароль, МаскаПоиска, МассивФайловПараметров, ПутьВременногоКаталога);
			КонецЕсли;	
		Иначе
			Возврат Неопределено;	
		КонецЕсли;

		// Отбойник если ничего не найдено
		КоличествоФайловПараметров = МассивФайловПараметров.Количество();
		Если КоличествоФайловПараметров = 0 Тогда
			Лог.Ошибка("Количество файлов параметров равно 0");
			Возврат Неопределено;
		Иначе
			Лог.Отладка("Количество найденых файлов: " + Строка(КоличествоФайловПараметров));	
		КонецЕсли;
		
		// Чтение файлов параметров		
		Для Каждого ФайлПараметров Из МассивФайловПараметров Цикл
			
			ПолноеИмяФайлаПараметров = ФайлПараметров.ПолноеИмя;
			Лог.Отладка("Начато чтение файлов параметров: " + Строка(ПолноеИмяФайлаПараметров));
			ЧтениеJSON = Новый ОбработкаJSON(ПолноеИмяФайлаПараметров);

			Если ЧтениеJSON.Прочитан Тогда
				Лог.Отладка("Файл JSON прочитан");
				ЧтениеJSON.ПрочитатьПараметрыJSON();
				ПараметрыJSON = ЧтениеJSON.ПараметрыJSON;
				Лог.Отладка("Количество параметров файла: " + ПараметрыJSON.Количество());
				ЗаполнитьТаблицуПараметров(ПараметрыJSON, ИдентификаторПараметров, ТаблицаПараметров);
			Иначе
				Лог.Отладка("Файл JSON не прочитан");
			КонецЕсли;		
		КонецЦикла;	

		// Если была работа с архивом, то был создан временный катало. Необходимо удалить его вместе с содержимым.
		Если Не(ПустаяСтрока(ПутьВременногоКаталога)) Тогда
			//УдалитьФайлы(ПутьВременногоКаталога);
			Лог.Отладка("Удален временный каталог: " + Строка(ПутьВременногоКаталога));
		КонецЕсли;
	КонецЦикла;		

	// Результат
	Возврат ТаблицаПараметров;

КонецФункции

Процедура ПолучитьФайлыАрхива(Архив, Пароль, МаскаПоиска, МассивФайлов, ПутьВременногоКаталога)

	// Создание временного каталога если нет
	Если ПустаяСтрока(ПутьВременногоКаталога) Тогда
		ВременныйФайл = Новый Файл(ПолучитьИмяВременногоФайла());
		ПутьВременногоКаталога = ОбъединитьПути(ВременныйФайл.Путь, ВременныйФайл.ИмяБезРасширения);
		СоздатьКаталог(ПутьВременногоКаталога);
		Лог.Отладка("Создан временный каталог: " + Строка(ПутьВременногоКаталога));
	Иначе
		Лог.Отладка("Установлен временный каталог: " + Строка(ПутьВременногоКаталога));	
	КонецЕсли;

	// Подключение временного каталога
	ВременныйКаталог = Новый Файл(ПутьВременногоКаталога);

	Если Не(ВременныйКаталог.Существует()) Тогда
		Лог.Ошибка("Временный каталог инициализирован, но не существует. Получение файлов архива невозможно");
		Возврат;
	КонецЕсли;	

	// Распаковка архива и поиск файлов
	Если ВременныйКаталог.Существует() Тогда
		Лог.Отладка("Временный каталог существует");
		ЧтениеАрхива = Новый ЧтениеZipФайла(Архив.ПолноеИмя, Пароль);
		ЧтениеАрхива.ИзвлечьВсе(ПутьВременногоКаталога, Истина);
		ФайлыАрхива = НайтиФайлы(ПутьВременногоКаталога, МаскаПоиска, Истина);
		ОбщиеПроцедурыФункции.ОбъединитьМассивы(МассивФайлов, ФайлыАрхива);
	Иначе
		Лог.Ошибка("Не удалось создать временный каталог для извлечения файлов по пути: """ + Строка(ПутьВременногоКаталога) + """");
	КонецЕсли;	

КонецПроцедуры	

Процедура ПолучитьФайлыКаталога(Каталог, Пароль, МаскаПоиска, МассивФайлов, ПутьВременногоКаталога)

	ПутьКаталога = Каталог.ПолноеИмя;
	ФайлыJSON = НайтиФайлы(ПутьКаталога, МаскаПоиска, Истина);
	ФайлыАрхивов = НайтиФайлы(ПутьКаталога, "*.zip", Истина);
	ОбщиеПроцедурыФункции.ОбъединитьМассивы(МассивФайлов, ФайлыJSON);

	Для Каждого ФайлыАрхива Из ФайлыАрхивов Цикл
		ПолучитьФайлыАрхива(ФайлыАрхива, Пароль, МаскаПоиска, МассивФайлов, ПутьВременногоКаталога);	
	КонецЦикла;	

КонецПроцедуры	


// === СЛУЖЕБНЫЕ === //
Процедура ЗаполнитьТаблицуПараметров(ПараметрыJSON, ИдентификаторПараметров, ТаблицаПараметров)
	
	Лог.Отладка("Начато заполнение таблицы параметров");
	Лог.Отладка("Идентификатор параметров: " + Строка(ИдентификаторПараметров));

	// Если много файлов, то параметры могут быть уже инициализированы
	Если ТаблицаПараметров = Неопределено Тогда
		Если ИдентификаторПараметров = "ПараметрыСоединений" Тогда
			ТаблицаПараметров = СформироватьТаблицуПараметровСоединений();
			Лог.Отладка("Сформирована таблица параметров соединений");
		ИначеЕсли ИдентификаторПараметров = "ПараметрыКоманд" Тогда
			ТаблицаПараметров = СформироватьТаблицуПараметровКоманд();
			Лог.Отладка("Сформирована таблица параметров команд");
		Иначе
			Лог.Ошибка("Не правильно указан идентификатор параметров");	
		КонецЕсли	
	КонецЕсли;

	// Чтение наборов параметров
	Лог.Отладка("Начало чтение наборов параметров");
	НаборыПараметров = ПараметрыJSON.Получить(ИдентификаторПараметров);

	Если НаборыПараметров <> Неопределено Тогда
		
		Лог.Отладка("Наборы параметров определены");
		КолонкиТаблицы = ТаблицаПараметров.Колонки;
	
		Для Каждого НаборПараметров Из НаборыПараметров Цикл
			ЗаполнитьСтрокуТаблицы(ТаблицаПараметров.Добавить(), КолонкиТаблицы, НаборПараметров);
		КонецЦикла;
	Иначе
		Лог.Отладка("Наборы параметров не определены");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПараметрыСоединений(ПараметрыСоединений) 
	
	
	Если ПараметрыСоединений.Количество() = 0 Тогда
		ПараметрыСоединений = Неопределено; // На неопределено легче проверить)))
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Идентификатор", "ПоУмолчанию");

	Если ПараметрыСоединений.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
		ЗаполнитьСтрокуТаблицы(ПараметрыСоединений.Добавить(), ПараметрыСоединений.Колонки, ПараметрыСоединений.Получить(0));
	КонецЕсли;

КонецПроцедуры
	
Процедура ОбработатьПараметрыКоманд(ПараметрыКоманд) 
	
	Если ПараметрыКоманд.Количество() = 0 Тогда
		ПараметрыКоманд = Неопределено; // На неопределено легче проверить)))
		Возврат;
	КонецЕсли

КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, Колонки, Источник)

	Для Каждого Колонка Из Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		ЗначениеИсточника = Источник.Получить(ИмяКолонки);
		СтрокаТаблицы[ИмяКолонки] = ЗначениеИсточника;
		Лог.Отладка("Колонка: " + Строка(ИмяКолонки) + "(=) Значение: " + Строка(ЗначениеИсточника));
	КонецЦикла	

КонецПроцедуры	

Функция СформироватьТаблицуПараметровСоединений()

	// ОписанияТипов = ПолучитьОписанияТипов();

	// Таблица (пока что без явного указания типов)
	ПараметрыСоединений = Новый ТаблицаЗначений();
	ПараметрыСоединений.Колонки.Добавить("Идентификатор"); // Уникальное имя соединения
	ПараметрыСоединений.Колонки.Добавить("Драйвер"); // Параметр подключения
	ПараметрыСоединений.Колонки.Добавить("Сервер"); // Параметр подключения
	ПараметрыСоединений.Колонки.Добавить("ДоверительноеСоединение"); // Параметр подключения
	ПараметрыСоединений.Колонки.Добавить("Логин"); // Параметр подключения
	ПараметрыСоединений.Колонки.Добавить("Пароль"); // Параметр подключения
	ПараметрыСоединений.Колонки.Добавить("Описание"); // Описание подключения
	ПараметрыСоединений.Колонки.Добавить("ПрефиксПути"); // Если параметр заполнен и у команды, использующей данное соединение включена опция "ФормироватьПутиАвтоматически" тогда пути будут сформированы по шаблону, а указанные в команде пути будут опущены.

	Возврат ПараметрыСоединений;

КонецФункции	

Функция СформироватьТаблицуПараметровКоманд()
	
	// ОписанияТипов = ПолучитьОписанияТипов();

	// Таблица (пока что без явного указания типов)
	ПараметрыКоманд = Новый ТаблицаЗначений();
	ПараметрыКоманд.Колонки.Добавить("Активность"); // Булево, если ложь, команда не выполняется
	ПараметрыКоманд.Колонки.Добавить("Идентификатор"); // Уникальное имя команды
	ПараметрыКоманд.Колонки.Добавить("ИдентификаторПредшественика"); // Если команда должна выполняться после другой команды
	ПараметрыКоманд.Колонки.Добавить("ИдентификаторСоединения"); // Если задан, то будет выполнена попытка найти параметры соединения с данным идентификатором, если пустой, то будут использованы параметры соединения по умолчанию.
	ПараметрыКоманд.Колонки.Добавить("ИгнорироватьОшибкиПредшественика"); // Имеет смысл только если задан идентификатор предшественика. Признак запуска команды даже если предыдущая завершена с ошибкой.
	ПараметрыКоманд.Колонки.Добавить("ТипКоманды"); // РезервоноеКопирование, Восстановление и т.д.
	ПараметрыКоманд.Колонки.Добавить("ФормироватьПутиАвтоматически"); // Если истина, то будет произведена попытка автоматического формирования путей бэкапов и т.д.
	ПараметрыКоманд.Колонки.Добавить("КоличествоОшибок"); // Изначально у всех команд 0, если больше 0, то зависимые команды будут выполнены, только при включенной опции "ИгнорироватьОшибкиПредшественика"
	ПараметрыКоманд.Колонки.Добавить("ПараметрыКоманды"); // Соответствие, ключи - строки, структура вложенности и параметров зависит от типа команды
	
	Возврат ПараметрыКоманд;

КонецФункции

Функция ПолучитьОписанияТипов()

	// Колонки строки
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов);

	// Колонки числа
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);

	// Колнки даты
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов);

	// Структура типов
	СтруктураОписанийТипов = Новый Структура();
	СтруктураОписанийТипов.Вставить("Строка", ОписаниеТиповСтрока);
	СтруктураОписанийТипов.Вставить("Число", ОписаниеТиповЧисло);
	СтруктураОписанийТипов.Вставить("Дата", ОписаниеТиповДата);

	Возврат СтруктураОписанийТипов;

КонецФункции

